#include <stdio.h>
#include <cstdlib>
#include <string>
#include <ctime>
#include <cstdint>

typedef unsigned char u8;
typedef unsigned short u16;
typedef uint32_t u32;
typedef unsigned long long u64;
typedef signed char s8;
typedef signed short s16;
typedef int32_t s32;
typedef signed long long s64;

typedef struct S0 {
    u8* fi0;
    u8* fi1;
} S0;

typedef void (*T0)(S0*);

void f0(S0* p0, u16 p1) {
    u8* l0 = p0->fi0;
    for (u16 v0=0; v0<p1; v0++) {
        if (v0%8 == 0) { printf("%4d: ", v0); }
        printf((l0+v0 == p0->fi1 ? ">%02X" : " %02X"), l0[v0]);
        if ((v0+1) % 8 == 0) { printf("\n"); }
    }
    printf("\n");
}

void f1(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    *(u8*)(p0->fi0 + l0) = *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f2(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    l1 = *(u16*)(p0->fi0 + l1);
    *(u8*)(p0->fi0 + l0) = *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f3(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    l0 = *(u16*)(p0->fi0 + l0);
    printf("-- %d\n", *(u8*)(p0->fi0 + l1));
    *(u8*)(p0->fi0 + l0) = *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f4(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    l0 = *(u16*)(p0->fi0 + l0);
    l1 = *(u16*)(p0->fi0 + l1);
    *(u8*)(p0->fi0 + l0) = *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f5(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    *(u8*)(p0->fi0 + l0) = *(p0->fi1+3);
    p0->fi1 += 4;
}

void f6(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(u8*)(p0->fi0 + l0) + *(u8*)(p0->fi0 + l1) + (*(p0->fi0+7) & 0b00000001);
    *(u8*)(p0->fi0 + l0) = l2;

    if (l2>>8) { *(p0->fi0+7) |= 0b00000001; }
    else { *(p0->fi0+7) &= 0b11111110; }

    p0->fi1 += 5;
}

void f7(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(u8*)(p0->fi0 + l0) - *(u8*)(p0->fi0 + l1) - (*(p0->fi0+7) & 0b00000001);
    *(u8*)(p0->fi0 + l0) = l2;

    if (l2>>8) { *(p0->fi0+7) |= 0b00000001; }
    else { *(p0->fi0+7) &= 0b11111110; }

    p0->fi1 += 5;
}

void f8(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    *(u8*)(p0->fi0 + l0) &= *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f9(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    *(u8*)(p0->fi0 + l0) |= *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f10(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    *(u8*)(p0->fi0 + l0) = ~(*(u8*)(p0->fi0 + l0));
    p0->fi1 += 3;
}

void f11(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    *(u8*)(p0->fi0 + l0) ^= *(u8*)(p0->fi0 + l1);
    p0->fi1 += 5;
}

void f12(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) == *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f13(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) != *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f14(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) > *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f15(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) >= *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f16(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) < *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f17(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    u16 l2 = *(p0->fi1+5) + (*(p0->fi1+6)<<8);
    *(u8*)(p0->fi0 + l0) = (*(u8*)(p0->fi0 + l1) <= *(u8*)(p0->fi0 + l2));
    p0->fi1 += 7;
}

void f18(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    p0->fi1 = (*(u8*)(p0->fi0 + l0) ? p0->fi0 + l1 : p0->fi1 + 5);
}

void f19(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    u16 l1 = *(p0->fi1+3) + (*(p0->fi1+4)<<8);
    p0->fi1 = (!*(u8*)(p0->fi0 + l0) ? p0->fi0 + l1 : p0->fi1 + 5);
}

void f20(S0* p0) {
    u16 l0 = *(p0->fi1+1) + (*(p0->fi1+2)<<8);
    p0->fi1 = p0->fi0 + l0;
}

void f21(S0* p0) {
    *(p0->fi0+7) &= 0b11111110;
    p0->fi1 = p0->fi1 + 1;
}

#define D0 21
T0 g0[D0] = {
     &f1,&f2,&f3,&f4,&f5,&f6,&f7,&f8,
     &f9,&f10,&f11,&f12,&f13,&f14,&f15,&f16,
     &f17,&f18,&f19,&f20,&f21
};

#define D1(p0) \
    (p0 & 0x80? '1':'0'), (p0 & 0x40? '1':'0'), (p0 & 0x20? '1':'0'), (p0 & 0x10? '1':'0'), \
    (p0 & 0x08? '1':'0'), (p0 & 0x04? '1':'0'), (p0 & 0x02? '1':'0'), (p0 & 0x01? '1':'0')

#define D2 "%c%c%c%c%c%c%c%c"

int main() {
    #include "code.casm.txt"
    u16 l1 = l0[0]+(l0[1]<<8);
    S0 l2 = {l0, l0+8+(l0[2]+(l0[3]<<8))};
    for (u8 v0=1; v0<=D0; v0++) { *(uintptr_t*)(l0+l1-8*v0) = (uintptr_t)g0[v0-1]; }

    l2.fi1 = l0+8+(l0[2]+(l0[3]<<8));

    u32 l3 = 0;
    u32 l4 = 0;
    scanf("%u", &l3);
    scanf("%u", &l4);
    *(u32*)(l2.fi0+8) = l3;
    *(u32*)(l2.fi0+12) = l4;

    // printf("--------------------------------\n");
    // printf("%% %ld: %d\n", l2.fi1-l2.fi0, *l2.fi1);
    // printf("--------------------------------\n");
    // f0(&l2, 8+(l0[2]+(l0[3]<<8)));

    while (*l2.fi1 != 0) {
        (*(T0)*(uintptr_t*)(l0+l1-sizeof(uintptr_t)*(*l2.fi1)))(&l2);
        // printf("--------------------------------\n");
        // printf("%% %ld: %d\n", l2.fi1-l2.fi0, *l2.fi1);
        // printf("--------------------------------\n");
        // f0(&l2, 8+(l0[2]+(l0[3]<<8)));
    }

    printf("%u\n", *(u32*)(l2.fi0+8));

    // if (l3 - l4 != *(u32*)(l2.fi0+8)) {
    //     printf("{\n");
    //     printf("    %d + %d != %d\n", l3, l4, *(u32*)(l2.fi0+8));
    //     printf("    " D2 D2 D2 " + " D2 D2 D2 " != " D2 D2 D2 "\n", D1(l3>>16), D1(l3>>8), D1(l3), D1(l4>>16), D1(l4>>8), D1(l4), D1(*(u32*)(l2.fi0+8)>>16), D1(*(u32*)(l2.fi0+8)>>8), D1(*(u32*)(l2.fi0+8)));
    //     printf("}\n");
    // }

    return 0;
}
